<?xml version="1.0" encoding="UTF-8"?>
<class name="one_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="same_flavored_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <field type="rand int unsigned" name="num_jelly_beans"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="flavor_e" name="jb_flavor"/>
    </task>
</class>
<class name="gift_boxed_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <field type="rand int unsigned" name="num_jelly_bean_flavors"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm="//`uvm_info( get_name(), jb_seq.convert2string(), UVM_NONE )"/>
        <field type="same_flavored_jelly_bean_sequence" name="jb_seq"/>
    </task>
</class>
<class name="jelly_bean_fc_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <field type="cross" name="sour_cp"/>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_sb_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_env" superClass="uvm_env;">
    <comments comm=""/>
    <field type="jelly_bean_sb_subscriber" name="jb_sb"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_driver" superClass="uvm_driver#(">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_monitor" superClass="uvm_monitor;">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_agent" superClass="uvm_agent;">
    <comments comm=""/>
    <field type="jelly_bean_monitor" name="jb_mon"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_test" superClass="uvm_test;">
    <comments comm=""/>
    <field type="jelly_bean_env" name="jb_env"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="jb_seq"/>
    </task>
</class>
<class name="jelly_bean_transaction" superClass="uvm_sequence_item;">
    <comments comm=""/>
    <field type="flavor" name="!"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
</class>
<class name="sugar_free_jelly_bean_transaction" superClass="jelly_bean_transaction;">
    <comments comm=""/>
</class>
<class name="one_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="same_flavored_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <field type="constraint num_jelly_beans_con { num_jelly_beans inside { [2:4]" name="}"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm="//  flavor_e               jb_flavor;//  jb_tx = jelly_bean_transaction::type_id::create( .name( "jb_tx" ) );//  assert( jb_tx.randomize() );//  jb_flavor = jb_tx.flavor;"/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="gift_boxed_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <field type="constraint num_jelly_bean_flavors_con { num_jelly_bean_flavors inside { [2:3]" name="}"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm="//    jb_seq = same_flavored_jelly_bean_sequence::type_id::create( .name( "jb_seq" ) );"/>
        <field type="same_flavored_jelly_bean_sequence" name="jb_seq"/>
    </task>
</class>
<class name="jelly_bean_fc_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <field type="cross" name="sour_cp"/>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_sb_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_env" superClass="uvm_env;">
    <comments comm=""/>
    <field type="jelly_bean_sb_subscriber" name="jb_sb"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_driver" superClass="uvm_driver#(">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_monitor" superClass="uvm_monitor;">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_agent" superClass="uvm_agent;">
    <comments comm=""/>
    <field type="jelly_bean_monitor" name="jb_mon"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_test" superClass="uvm_test;">
    <comments comm=""/>
    <field type="jelly_bean_env" name="jb_env"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="jb_seq"/>
    </task>
</class>
<class name="jelly_bean_transaction" superClass="uvm_sequence_item;">
    <comments comm=""/>
    <field type="flavor" name="!"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
</class>
<class name="sugar_free_jelly_bean_transaction" superClass="jelly_bean_transaction;">
    <comments comm=""/>
</class>
<class name="one_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="same_flavored_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <field type="constraint num_jelly_beans_con { num_jelly_beans inside { [2:4]" name="}"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="flavor_e" name="jb_flavor"/>
    </task>
</class>
<class name="gift_boxed_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <field type="constraint num_jelly_bean_flavors_con { num_jelly_bean_flavors inside { [2:3]" name="}"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="jb_seq"/>
    </task>
</class>
<class name="jelly_bean_fc_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <field type="cross" name="sour_cp"/>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_sb_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_env" superClass="uvm_env;">
    <comments comm=""/>
    <field type="jelly_bean_sb_subscriber" name="jb_sb"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_driver" superClass="uvm_driver#(">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_monitor" superClass="uvm_monitor;">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_agent" superClass="uvm_agent;">
    <comments comm=""/>
    <field type="jelly_bean_monitor" name="jb_mon"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_test" superClass="uvm_test;">
    <comments comm=""/>
    <field type="jelly_bean_env" name="jb_env"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="jb_seq"/>
    </task>
</class>
<class name="jelly_bean_transaction" superClass="uvm_sequence_item;">
    <comments comm=""/>
    <field type="flavor" name="!"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
</class>
<class name="sugar_free_jelly_bean_transaction" superClass="jelly_bean_transaction;">
    <comments comm=""/>
</class>
<class name="one_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="same_flavored_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <field type="constraint num_jelly_beans_con { num_jelly_beans inside { [2:4]" name="}"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="flavor_e" name="jb_flavor"/>
    </task>
</class>
<class name="gift_boxed_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <field type="constraint num_jelly_bean_flavors_con { num_jelly_bean_flavors inside { [2:3]" name="}"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="jb_seq"/>
    </task>
</class>
<class name="jelly_bean_fc_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <field type="cross" name="sour_cp"/>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_sb_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <function return="bit" name="check_taste_in_c">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_env" superClass="uvm_env;">
    <comments comm=""/>
    <field type="jelly_bean_sb_subscriber" name="jb_sb"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_driver" superClass="uvm_driver#(">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_monitor" superClass="uvm_monitor;">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_agent" superClass="uvm_agent;">
    <comments comm=""/>
    <field type="jelly_bean_monitor" name="jb_mon"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_test" superClass="uvm_test;">
    <comments comm=""/>
    <field type="jelly_bean_env" name="jb_env"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="jb_seq"/>
    </task>
</class>
<class name="jelly_bean_transaction" superClass="uvm_sequence_item;">
    <comments comm=""/>
    <field type="flavor" name="!"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
</class>
<class name="sugar_free_jelly_bean_transaction" superClass="jelly_bean_transaction;">
    <comments comm=""/>
</class>
<class name="jelly_bean_configuration" superClass="uvm_object;">
    <comments comm=""/>
</class>
<class name="jelly_bean_transaction" superClass="uvm_sequence_item;">
    <comments comm=""/>
    <field type="flavor" name="!"/>
</class>
<class name="sugar_free_jelly_bean_transaction" superClass="jelly_bean_transaction;">
    <comments comm=""/>
</class>
<class name="one_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_req"/>
    </task>
</class>
<class name="jelly_bean_put_driver" superClass="uvm_driver#(">
    <comments comm=""/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="run_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_req"/>
    </task>
</class>
<class name="jelly_bean_master" superClass="uvm_component;">
    <comments comm=""/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="run_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_rsp"/>
    </task>
</class>
<class name="jelly_bean_slave" superClass="uvm_component;">
    <comments comm=""/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="bit" name="try_put">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="bit" name="can_put">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="bit" name="try_get">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="bit" name="can_get">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="bit" name="try_peek">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="bit" name="can_peek">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="run_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_rsp"/>
    </task>
    <task name="put">
        <param>
        </param>
        <comments comm=""/>
    </task>
    <task name="get">
        <param>
        </param>
        <comments comm=""/>
    </task>
    <task name="peek">
        <param>
        </param>
        <comments comm=""/>
    </task>
</class>
<class name="jelly_bean_transporter" superClass="uvm_component;">
    <comments comm=""/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="bit" name="nb_transport">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="transport">
        <param>
        </param>
        <comments comm=""/>
    </task>
</class>
<class name="jelly_bean_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_agent" superClass="uvm_agent;">
    <comments comm=""/>
    <field type="jelly_bean_subscriber" name="jb_sub"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_env" superClass="uvm_env;">
    <comments comm=""/>
    <field type="jelly_bean_agent" name="jb_agent"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_test" superClass="uvm_test;">
    <comments comm=""/>
    <field type="jelly_bean_env" name="jb_env"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_configuration" name="jb_cfg"/>
    </function>
    <task name="run_phase">
        <param>
        </param>
        <comments comm="//    `uvm_info( "jelly_bean_test", { "\n", jb_seq.sprint() }, UVM_LOW )"/>
        <field type="one_jelly_bean_sequence" name="jb_seq"/>
    </task>
</class>
<class name="one_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="same_flavored_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <field type="rand int unsigned" name="num_jelly_beans"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="flavor_e" name="jb_flavor"/>
    </task>
</class>
<class name="gift_boxed_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <field type="rand int unsigned" name="num_jelly_bean_flavors"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm="//`uvm_info( get_name(), jb_seq.convert2string(), UVM_NONE )"/>
        <field type="same_flavored_jelly_bean_sequence" name="jb_seq"/>
    </task>
</class>
<class name="jelly_bean_fc_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <field type="cross" name="sour_cp"/>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm="//            _ID__  ___________________MESSAGE____________________"/>
    </function>
</class>
<class name="jelly_bean_sb_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_env" superClass="uvm_env;">
    <comments comm=""/>
    <field type="jelly_bean_sb_subscriber" name="jb_sb"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_driver" superClass="uvm_driver#(">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_monitor" superClass="uvm_monitor;">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_agent" superClass="uvm_agent;">
    <comments comm=""/>
    <field type="jelly_bean_monitor" name="jb_mon"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_test" superClass="uvm_test;">
    <comments comm=""/>
    <field type="protected int" name="warning_id1_fd"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="start_of_simulation_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_transaction" superClass="uvm_sequence_item;">
    <comments comm=""/>
</class>
<class name="sugar_free_jelly_bean_transaction" superClass="jelly_bean_transaction;">
    <comments comm=""/>
</class>
<class name="jelly_bean_agent_config" superClass="uvm_object;">
    <comments comm=""/>
</class>
<class name="jelly_bean_env_config" superClass="uvm_object;">
    <comments comm=""/>
</class>
<class name="jelly_bean_transaction" superClass="uvm_sequence_item;">
    <comments comm=""/>
</class>
<class name="same_flavored_jelly_beans_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
</class>
<class name="jelly_bean_recipe_virtual_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
</class>
<class name="jelly_bean_driver" superClass="uvm_driver#(">
    <comments comm=""/>
</class>
<class name="jelly_bean_monitor" superClass="uvm_monitor;">
    <comments comm=""/>
</class>
<class name="jelly_bean_fc_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
</class>
<class name="jelly_bean_agent" superClass="uvm_agent;">
    <comments comm=""/>
</class>
<class name="jelly_bean_scoreboard;" superClass="null">
    <comments comm=""/>
</class>
<class name="jelly_bean_sb_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
</class>
<class name="jelly_bean_scoreboard" superClass="uvm_scoreboard;">
    <comments comm=""/>
</class>
<class name="jelly_bean_env" superClass="uvm_env;">
    <comments comm=""/>
</class>
<class name="jelly_bean_base_test" superClass="uvm_test;">
    <comments comm=""/>
</class>
<class name="jelly_bean_recipe_test" superClass="jelly_bean_base_test;">
    <comments comm=""/>
</class>
<class name="jelly_bean_configuration" superClass="uvm_object;">
    <comments comm=""/>
</class>
<class name="jelly_bean_transaction" superClass="uvm_sequence_item;">
    <comments comm=""/>
</class>
<class name="sugar_free_jelly_bean_transaction" superClass="jelly_bean_transaction;">
    <comments comm=""/>
</class>
<class name="one_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
</class>
<class name="same_flavored_jelly_beans_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
</class>
<class name="gift_boxed_jelly_beans_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
</class>
<class name="jelly_bean_driver" superClass="uvm_driver#(">
    <comments comm=""/>
</class>
<class name="jelly_bean_monitor" superClass="uvm_monitor;">
    <comments comm=""/>
</class>
<class name="jelly_bean_agent" superClass="uvm_agent;">
    <comments comm=""/>
</class>
<class name="jelly_bean_fc_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
</class>
<class name="jelly_bean_scoreboard;" superClass="null">
    <comments comm=""/>
</class>
<class name="jelly_bean_sb_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
</class>
<class name="jelly_bean_scoreboard" superClass="uvm_scoreboard;">
    <comments comm=""/>
</class>
<class name="jelly_bean_env" superClass="uvm_env;">
    <comments comm=""/>
</class>
<class name="jelly_bean_test" superClass="uvm_test;">
    <comments comm=""/>
</class>
<class name="jelly_bean_order_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
</class>
<class name="jelly_bean_fc_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
</class>
<class name="jelly_bean_sb_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
</class>
<class name="jelly_bean_env" superClass="uvm_env;">
    <comments comm=""/>
</class>
<class name="jelly_bean_sequencer" superClass="uvm_sequencer#(">
    <comments comm=""/>
</class>
<class name="jelly_bean_driver" superClass="uvm_driver#(">
    <comments comm=""/>
</class>
<class name="jelly_bean_monitor" superClass="uvm_monitor;">
    <comments comm=""/>
</class>
<class name="jelly_bean_agent" superClass="uvm_agent;">
    <comments comm=""/>
</class>
<class name="jelly_bean_test" superClass="uvm_test;">
    <comments comm=""/>
</class>
<class name="jelly_bean_transaction" superClass="uvm_sequence_item;">
    <comments comm=""/>
</class>
<class name="sugar_free_jelly_bean_transaction" superClass="jelly_bean_transaction;">
    <comments comm=""/>
</class>
<class name="one_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <task name="body">
        <param>
        </param>
        <comments comm="    jb_env.jb_fc.set_report_id_action         (           "id1", UVM_DISPLAY | UVM_LOG );    jb_env.jb_fc.set_report_severity_id_action( UVM_INFO, "id1", UVM_DISPLAY | UVM_LOG );*/        jb_env.jb_fc.set_report_default_file    (                     default_fd     );    jb_env.jb_fc.set_report_severity_file   ( UVM_WARNING,        warning_fd     );    jb_env.jb_fc.set_report_id_file         (              "id1", id1_fd         );    jb_env.jb_fc.set_report_severity_id_file( UVM_WARNING, "id1", warning_id1_fd );  endfunction: start_of_simulation_phase  //----------------------------------------------------------------------------  // task: main_phase  //----------------------------------------------------------------------------  task main_phase( uvm_phase phase );    gift_boxed_jelly_bean_sequence jb_seq;        jb_seq = gift_boxed_jelly_bean_sequence::type_id::create( .name( "jb_seq" ) );    assert( jb_seq.randomize() );    `uvm_info( "jb_seq", jb_seq.convert2string(), UVM_NONE )    jb_seq.set_starting_phase( phase );    jb_seq.set_automatic_phase_objection( .value( 1 ) );    jb_seq.start( jb_env.jb_agent.jb_seqr );  endtask: main_phase  //----------------------------------------------------------------------------  // Function: final_phase  //----------------------------------------------------------------------------  function void final_phase( uvm_phase phase );    $fclose( default_fd     );    $fclose( warning_fd     );    $fclose( id1_fd         );    $fclose( warning_id1_fd );  endfunction: final_phaseclass jelly_bean_transaction extends uvm_sequence_item;  `uvm_object_utils( jelly_bean_transaction )    rand flavor_e flavor;  rand color_e  color;  rand bit      sugar_free;  rand bit      sour;  taste_e       taste;    constraint flavor_color_con {    flavor != NO_FLAVOR;    flavor == APPLE     -> color != BLUE;    flavor == BLUEBERRY -> color == BLUE;  }    //----------------------------------------------------------------------------  // Function: new  //----------------------------------------------------------------------------  function new( string name = "jelly_bean_transaction" );    super.new( name );  endfunction: new    //----------------------------------------------------------------------------  // Function: do_copy  //----------------------------------------------------------------------------  virtual function void do_copy( uvm_object rhs );    jelly_bean_transaction that;    if ( ! $cast( that, rhs ) ) begin      `uvm_error( get_name(), "rhs is not a jelly_bean_transaction" )      return;    end    super.do_copy( rhs );    this.flavor     = that.flavor;    this.color      = that.color;    this.sugar_free = that.sugar_free;    this.sour       = that.sour;    this.taste      = that.taste;  endfunction: do_copy    //----------------------------------------------------------------------------  // Function: do_compare  //----------------------------------------------------------------------------  virtual function bit do_compare( uvm_object rhs, uvm_comparer comparer );    jelly_bean_transaction that;    if ( ! $cast( that, rhs ) ) return 0;    return ( super.do_compare( rhs, comparer )  &&             this.flavor     == that.flavor     &&             this.color      == that.color      &&             this.sugar_free == that.sugar_free &&             this.sour       == that.sour       &&             this.taste      == that.taste );  endfunction: do_compare  //----------------------------------------------------------------------------  // Function: convert2string  //----------------------------------------------------------------------------    virtual function string convert2string();    string s = super.convert2string();    s = { s, $sformatf( "\nname      : %s", get_name() ) };    s = { s, $sformatf( "\nflavor    : %s", flavor.name() ) };    s = { s, $sformatf( "\ncolor     : %s", color.name() ) };    s = { s, $sformatf( "\nsugar_free: %b", sugar_free ) };    s = { s, $sformatf( "\nsour      : %b", sour ) };    s = { s, $sformatf( "\ntaste     : %s", taste.name() ) };    return s;  endfunction: convert2string  class sugar_free_jelly_bean_transaction extends jelly_bean_transaction;  `uvm_object_utils( sugar_free_jelly_bean_transaction )  constraint sugar_free_con {    sugar_free == 1;  }  //----------------------------------------------------------------------------  // Function: new  //----------------------------------------------------------------------------  function new( string name = "sugar_free_jelly_bean_transaction" );    super.new( name );  endfunction: new  class jelly_bean_agent_config extends uvm_object;   `uvm_object_utils( jelly_bean_agent_config )   uvm_active_passive_enum active = UVM_ACTIVE;   bit has_jb_fc_sub = 1; // switch to instantiate a functional coverage subscriber   virtual jelly_bean_if jb_if;   function new( string name = "" );      super.new( name );   endfunction: newclass jelly_bean_env_config extends uvm_object;   `uvm_object_utils( jelly_bean_env_config )   bit has_jb_agent1 = 1; // switch to instantiate an agent #1   bit has_jb_agent2 = 1; // switch to instantiate an agent #2   bit has_jb_sb1    = 1; // switch to instantiate a scoreboard #1   bit has_jb_sb2    = 1; // switch to instantiate a scoreboard #2      jelly_bean_agent_config jb_agent_cfg1;   jelly_bean_agent_config jb_agent_cfg2;   function new( string name = "" );      super.new( name );   endfunction: newclass jelly_bean_transaction extends uvm_sequence_item;   typedef enum bit[2:0] { NO_FLAVOR, APPLE, CHOCOLATE, CINNAMON, COCONUT,			   LEMON, STRAWBERRY, VANILLA  } flavor_e;   typedef enum bit[1:0] { RED, GREEN, YELLOW, WHITE   } color_e;   typedef enum bit[1:0] { UNKNOWN_TASTE, YUMMY, YUCKY } taste_e;   rand flavor_e flavor;   rand color_e  color;   rand bit      sugar_free;   rand bit      sour;   taste_e       taste; // response   constraint flavor_color_con {      flavor != NO_FLAVOR;      flavor == APPLE      -> color inside { RED, GREEN };      flavor == CINNAMON   -> color == RED;      flavor == COCONUT    -> color == WHITE;      flavor == LEMON      -> color == YELLOW;      flavor == STRAWBERRY -> color == RED;      flavor == VANILLA    -> color == WHITE;   }   function new( string name = "" );      super.new( name );   endfunction: new   `uvm_object_utils_begin( jelly_bean_transaction )      `uvm_field_enum( flavor_e, flavor, UVM_ALL_ON )      `uvm_field_enum( color_e,  color,  UVM_ALL_ON )      `uvm_field_int ( sugar_free,       UVM_ALL_ON )      `uvm_field_int ( sour,             UVM_ALL_ON )      `uvm_field_enum( taste_e,  taste,  UVM_ALL_ON )   `uvm_object_utils_endclass same_flavored_jelly_beans_sequence extends uvm_sequence#( jelly_bean_transaction );   // knobs   rand int unsigned num_jelly_beans;   rand jelly_bean_transaction::flavor_e flavor;   local same_flavored_jelly_beans_sequence self = this;   constraint num_jelly_beans_con { num_jelly_beans inside { [1:4] }; }   function new( string name = "" );      super.new( name );   endfunction: new   task body();      jelly_bean_transaction jb_tx;      repeat ( num_jelly_beans ) begin	 jb_tx = jelly_bean_transaction::type_id::create( .name( "jb_tx" ) );	 start_item( jb_tx );`ifndef CL_USE_MODELSIM	 assert( jb_tx.randomize() with { this.flavor == self.flavor; } );`endif	 `uvm_info( get_name(), { "\n", jb_tx.sprint() }, UVM_LOW )	 finish_item( jb_tx );      end   endtask: body   `uvm_object_utils_begin( same_flavored_jelly_beans_sequence )      `uvm_field_int ( num_jelly_beans,                          UVM_ALL_ON )      `uvm_field_enum( jelly_bean_transaction::flavor_e, flavor, UVM_ALL_ON )   `uvm_object_utils_endclass jelly_bean_recipe_virtual_sequence extends uvm_sequence#( uvm_sequence_item );   typedef enum bit[1:0] { LEMON_MERINGUE_PIE,   // 2 LEMON      + 2 COCONUT			   STRAWBERRY_SHORTCAKE, // 2 STRAWBERRY + 2 VANILLA			   CANDY_APPLE           // 2 APPLE      + 1 CINNAMON			   } recipe_e;   rand recipe_e recipe;   jelly_bean_sequencer jb_seqr1;   jelly_bean_sequencer jb_seqr2;   same_flavored_jelly_beans_sequence jb_seq1;   same_flavored_jelly_beans_sequence jb_seq2;   function new( string name = "" );      super.new( name );   endfunction: new   task body();      jb_seq1 = same_flavored_jelly_beans_sequence::type_id::create( .name( "jb_seq1" ) );      jb_seq2 = same_flavored_jelly_beans_sequence::type_id::create( .name( "jb_seq2" ) );      case ( recipe )	LEMON_MERINGUE_PIE: begin	   jb_seq1.flavor          = jelly_bean_transaction::LEMON;	   jb_seq2.flavor          = jelly_bean_transaction::COCONUT;           jb_seq1.num_jelly_beans = 2;           jb_seq2.num_jelly_beans = 2;	end	STRAWBERRY_SHORTCAKE: begin	   jb_seq1.flavor          = jelly_bean_transaction::STRAWBERRY;	   jb_seq2.flavor          = jelly_bean_transaction::VANILLA;           jb_seq1.num_jelly_beans = 2;           jb_seq2.num_jelly_beans = 2;	end	CANDY_APPLE: begin	   jb_seq1.flavor          = jelly_bean_transaction::APPLE;	   jb_seq2.flavor          = jelly_bean_transaction::CINNAMON;           jb_seq1.num_jelly_beans = 2;           jb_seq2.num_jelly_beans = 1;	end      endcase // case ( recipe )      `uvm_info( get_name(), { "\n", this.sprint() }, UVM_LOW )      fork	 jb_seq1.start( .sequencer( jb_seqr1 ), .parent_sequence( this ) );	 jb_seq2.start( .sequencer( jb_seqr2 ), .parent_sequence( this ) );      join   endtask: body      `uvm_object_utils_begin( jelly_bean_recipe_virtual_sequence )      `uvm_field_enum  ( recipe_e, recipe, UVM_ALL_ON )      `uvm_field_object( jb_seq1,          UVM_ALL_ON )      `uvm_field_object( jb_seq2,          UVM_ALL_ON )   `uvm_object_utils_endclass jelly_bean_driver extends uvm_driver#( jelly_bean_transaction );   `uvm_component_utils( jelly_bean_driver )   virtual jelly_bean_if jb_if;   function new( string name, uvm_component parent );      super.new( name, parent );   endfunction: new   function void build_phase( uvm_phase phase );      super.build_phase( phase );   endfunction: build_phase   task main_phase( uvm_phase phase );      jelly_bean_transaction jb_tx;      forever begin	 @jb_if.master_cb;	 jb_if.master_cb.flavor <= jelly_bean_transaction::NO_FLAVOR;	 seq_item_port.get_next_item( jb_tx );	 @jb_if.master_cb;	 jb_if.master_cb.flavor     <= jb_tx.flavor;	 jb_if.master_cb.color      <= jb_tx.color;	 jb_if.master_cb.sugar_free <= jb_tx.sugar_free;	 jb_if.master_cb.sour       <= jb_tx.sour;	 seq_item_port.item_done();      end   endtask: main_phase   class jelly_bean_monitor extends uvm_monitor;   `uvm_component_utils( jelly_bean_monitor )   uvm_analysis_port#( jelly_bean_transaction ) jb_ap;   virtual jelly_bean_if jb_if;   function new( string name, uvm_component parent );      super.new( name, parent );   endfunction: new   function void build_phase( uvm_phase phase );      super.build_phase( phase );      jb_ap = new( .name( "jb_ap" ), .parent( this ) );   endfunction: build_phase   task main_phase( uvm_phase phase );      forever begin	 jelly_bean_transaction jb_tx;	 @jb_if.slave_cb;	 if ( jb_if.slave_cb.flavor != jelly_bean_transaction::NO_FLAVOR ) begin	    jb_tx = jelly_bean_transaction::type_id::create( .name( "jb_tx" ) );	    jb_tx.flavor     = jelly_bean_transaction::flavor_e'( jb_if.slave_cb.flavor );	    jb_tx.color      = jelly_bean_transaction::color_e' ( jb_if.slave_cb.color  );	    jb_tx.sugar_free = jb_if.slave_cb.sugar_free;	    jb_tx.sour       = jb_if.slave_cb.sour;	    @jb_if.master_cb;	    jb_tx.taste = jelly_bean_transaction::taste_e'( jb_if.master_cb.taste );	    jb_ap.write( jb_tx );	 end      end   endtask: main_phaseclass jelly_bean_fc_subscriber extends uvm_subscriber#( jelly_bean_transaction );   `uvm_component_utils( jelly_bean_fc_subscriber )   jelly_bean_transaction jb_tx;`ifndef CL_USE_MODELSIM   covergroup jelly_bean_cg;      flavor_cp:     coverpoint jb_tx.flavor;      color_cp:      coverpoint jb_tx.color;      sugar_free_cp: coverpoint jb_tx.sugar_free;      sour_cp:       coverpoint jb_tx.sour;      cross flavor_cp, color_cp, sugar_free_cp, sour_cp;   endgroup: jelly_bean_cg`endif   function new( string name, uvm_component parent );      super.new( name, parent );`ifndef CL_USE_MODELSIM      jelly_bean_cg = new;`endif   endfunction: new   function void write( jelly_bean_transaction t );      jb_tx = t;`ifndef CL_USE_MODELSIM      jelly_bean_cg.sample();`endif   endfunction: writeclass jelly_bean_agent extends uvm_agent;   `uvm_component_utils( jelly_bean_agent )   jelly_bean_agent_config  jb_agent_cfg;   jelly_bean_sequencer     jb_seqr;   jelly_bean_driver        jb_drvr;   jelly_bean_monitor       jb_mon;   jelly_bean_fc_subscriber jb_fc_sub;   uvm_analysis_port#( jelly_bean_transaction ) jb_ap;   function new( string name, uvm_component parent );      super.new( name, parent );   endfunction: new   function void build_phase( uvm_phase phase );      super.build_phase( phase );      if ( ! uvm_config_db#( jelly_bean_agent_config )::get( .cntxt     ( this ), 							     .inst_name ( "" ), 							     .field_name( "jb_agent_cfg" ),							     .value     (  jb_agent_cfg ) ) ) begin	 `uvm_error( "jelly_bean_agent", "jb_agent_cfg not found" )      end      if ( jb_agent_cfg.active == UVM_ACTIVE ) begin	 jb_seqr = jelly_bean_sequencer::type_id::create( .name( "jb_seqr" ), .parent( this ) );	 jb_drvr = jelly_bean_driver   ::type_id::create( .name( "jb_drvr" ), .parent( this ) );      end      if ( jb_agent_cfg.has_jb_fc_sub ) begin	jb_fc_sub = jelly_bean_fc_subscriber::type_id::create( .name( "jb_fc_sub" ), .parent( this ) );      end      jb_mon = jelly_bean_monitor::type_id::create( .name( "jb_mon" ), .parent( this ) );   endfunction: build_phase   function void connect_phase( uvm_phase phase );      super.connect_phase( phase );      jb_mon.jb_if = jb_agent_cfg.jb_if;      jb_ap = jb_mon.jb_ap;            if ( jb_agent_cfg.active == UVM_ACTIVE ) begin	 jb_drvr.seq_item_port.connect( jb_seqr.seq_item_export );	 jb_drvr.jb_if = jb_agent_cfg.jb_if;      end      if ( jb_agent_cfg.has_jb_fc_sub ) begin	 jb_ap.connect( jb_fc_sub.analysis_export );      end   endfunction: connect_phasetypedef class jelly_bean_scoreboard;      //---------------------------------------------------------------------------   // Class: jelly_bean_sb_subscriber   //---------------------------------------------------------------------------class jelly_bean_sb_subscriber extends uvm_subscriber#( jelly_bean_transaction );   `uvm_component_utils( jelly_bean_sb_subscriber )   function new( string name, uvm_component parent );      super.new( name, parent );   endfunction: new   function void write( jelly_bean_transaction t );      jelly_bean_scoreboard jb_sb;            $cast( jb_sb, m_parent );      jb_sb.check_jelly_bean_taste( t );   endfunction: write   class jelly_bean_scoreboard extends uvm_scoreboard;   `uvm_component_utils( jelly_bean_scoreboard )   uvm_analysis_export#( jelly_bean_transaction ) jb_analysis_export;   local jelly_bean_sb_subscriber jb_sb_sub;   local int unsigned num_failed = 0;      function new( string name, uvm_component parent );      super.new( name, parent );   endfunction: new   function void build_phase( uvm_phase phase );      super.build_phase( phase );      jb_analysis_export = new( .name( "jb_analysis_export" ), .parent( this ) );      jb_sb_sub = jelly_bean_sb_subscriber::type_id::create( .name( "jb_sb_sub" ), .parent( this ) );   endfunction: build_phase   function void connect_phase( uvm_phase phase );      super.connect_phase( phase );      jb_analysis_export.connect( jb_sb_sub.analysis_export );   endfunction: connect_phase   function void report_phase( uvm_phase phase );      super.report_phase( phase );      if ( num_failed > 0 ) $display( "=== TEST FAILED (%s num_failed=%0d) ===", get_name(), num_failed );      else                  $display( "=== TEST PASSED (%s) ===", get_name() );   endfunction: report_phase   virtual function void check_jelly_bean_taste( jelly_bean_transaction jb_tx );      uvm_table_printer p = new;      if ( jb_tx.flavor == jelly_bean_transaction::CHOCOLATE && jb_tx.sour &&	   jb_tx.taste  == jelly_bean_transaction::YUMMY ) begin	 `uvm_error( "jelly_bean_scoreboard", { "You lost sense of taste!\n", jb_tx.sprint(p) } )	 num_failed++;      end else begin	 `uvm_info( get_name(), { "You have a good sense of taste.\n", jb_tx.sprint(p) }, UVM_LOW )      end   endfunction: check_jelly_bean_tasteclass jelly_bean_env extends uvm_env;   `uvm_component_utils( jelly_bean_env )   jelly_bean_env_config jb_env_cfg;   jelly_bean_agent      jb_agent1;   jelly_bean_agent      jb_agent2;   jelly_bean_scoreboard jb_sb1;   jelly_bean_scoreboard jb_sb2;   function new( string name, uvm_component parent );      super.new( name, parent );   endfunction: new   function void build_phase( uvm_phase phase );      super.build_phase( phase );      if ( ! uvm_config_db#( jelly_bean_env_config )::get	   ( .cntxt( this ), .inst_name( "" ), .field_name( "jb_env_cfg" ), .value( jb_env_cfg ) ) ) begin	 `uvm_error( "jelly_bean_env", "jb_env_cfg not found" )      end      if ( jb_env_cfg.has_jb_agent1 ) begin	 uvm_config_db#( jelly_bean_agent_config )::set( .cntxt( this ), .inst_name( "jb_agent1*" ), 	    .field_name( "jb_agent_cfg" ), .value( jb_env_cfg.jb_agent_cfg1 ) );	 jb_agent1 = jelly_bean_agent::type_id::create( .name( "jb_agent1" ), .parent( this ) );	 if ( jb_env_cfg.has_jb_sb1 ) begin	    jb_sb1 = jelly_bean_scoreboard::type_id::create( .name( "jb_sb1" ), .parent( this ) );	 end      end      if ( jb_env_cfg.has_jb_agent2 ) begin	 uvm_config_db#( jelly_bean_agent_config )::set( .cntxt( this ), .inst_name( "jb_agent2*" ),	    .field_name( "jb_agent_cfg" ), .value( jb_env_cfg.jb_agent_cfg2 ) );	 jb_agent2 = jelly_bean_agent::type_id::create( .name( "jb_agent2" ), .parent( this ) );	 if ( jb_env_cfg.has_jb_sb2 ) begin	    jb_sb2 = jelly_bean_scoreboard::type_id::create( .name( "jb_sb2" ), .parent( this ) );	 end      end    endfunction: build_phase   function void connect_phase( uvm_phase phase );      super.connect_phase( phase );      if ( jb_env_cfg.has_jb_agent1 && jb_env_cfg.has_jb_sb1 )	jb_agent1.jb_ap.connect( jb_sb1.jb_analysis_export );      if ( jb_env_cfg.has_jb_agent2 && jb_env_cfg.has_jb_sb2 )	jb_agent2.jb_ap.connect( jb_sb2.jb_analysis_export );   endfunction: connect_phaseclass jelly_bean_base_test extends uvm_test;   `uvm_component_utils( jelly_bean_base_test )   jelly_bean_env          jb_env;   jelly_bean_env_config   jb_env_cfg;   jelly_bean_agent_config jb_agent_cfg1;   jelly_bean_agent_config jb_agent_cfg2;   function new( string name, uvm_component parent );      super.new( name, parent );   endfunction: new   function void build_phase( uvm_phase phase );      super.build_phase( phase );      jb_env_cfg    = jelly_bean_env_config  ::type_id::create( "jb_env_cfg"    );      jb_agent_cfg1 = jelly_bean_agent_config::type_id::create( "jb_agent_cfg1" );      jb_agent_cfg2 = jelly_bean_agent_config::type_id::create( "jb_agent_cfg2" );            if ( ! uvm_config_db#( virtual jelly_bean_if )::get	   ( .cntxt( this ), .inst_name( "" ), .field_name( "jb_if1" ), .value( jb_agent_cfg1.jb_if ) ) ) begin	 `uvm_error( "jelly_bean_test", "jb_if1 not found" )      end      if ( ! uvm_config_db#( virtual jelly_bean_if )::get	   ( .cntxt( this ), .inst_name( "" ), .field_name( "jb_if2" ), .value( jb_agent_cfg2.jb_if ) ) ) begin	 `uvm_error( "jelly_bean_test", "jb_if2 not found" )      end      jb_env_cfg.jb_agent_cfg1 = jb_agent_cfg1;      jb_env_cfg.jb_agent_cfg2 = jb_agent_cfg2;      uvm_config_db#( jelly_bean_env_config )::set	( .cntxt( this ), .inst_name( "*" ), .field_name( "jb_env_cfg" ), .value( jb_env_cfg ) );      jb_env = jelly_bean_env::type_id::create( .name( "jb_env" ), .parent( this ) );   endfunction: build_phaseclass jelly_bean_recipe_test extends jelly_bean_base_test;   `uvm_component_utils( jelly_bean_recipe_test )   function new( string name, uvm_component parent );      super.new( name, parent );   endfunction: new   task main_phase( uvm_phase phase );      jelly_bean_recipe_virtual_sequence jb_vseq;      phase.raise_objection( .obj( this ) );      jb_vseq = jelly_bean_recipe_virtual_sequence::type_id::create( .name( "jb_vseq" ) );      jb_vseq.jb_seqr1 = jb_env.jb_agent1.jb_seqr;      jb_vseq.jb_seqr2 = jb_env.jb_agent2.jb_seqr;`ifndef CL_USE_MODELSIM      assert( jb_vseq.randomize() );`endif      jb_vseq.start( .sequencer( null ) );      #100ns ;      phase.drop_objection( .obj( this ) );   endtask: main_phaseclass jelly_bean_configuration extends uvm_object;   `uvm_object_utils( jelly_bean_configuration )   function new( string name = "" );      super.new( name );   endfunction: newclass jelly_bean_transaction extends uvm_sequence_item;   typedef enum bit[2:0] { NO_FLAVOR, APPLE, BLUEBERRY, BUBBLE_GUM, CHOCOLATE } flavor_e;   typedef enum bit[1:0] { RED, GREEN, BLUE } color_e;   typedef enum bit[1:0] { UNKNOWN, YUMMY, YUCKY } taste_e;   rand flavor_e flavor;   rand color_e  color;   rand bit      sugar_free;   rand bit      sour;   taste_e       taste;   constraint flavor_color_con {      flavor != NO_FLAVOR;      flavor == APPLE     -> color != BLUE;      flavor == BLUEBERRY -> color == BLUE;   }   function new( string name = "" );      super.new( name );   endfunction: new   `uvm_object_utils_begin( jelly_bean_transaction )      `uvm_field_enum( flavor_e, flavor, UVM_ALL_ON )      `uvm_field_enum( color_e,  color,  UVM_ALL_ON )      `uvm_field_int ( sugar_free,       UVM_ALL_ON )      `uvm_field_int ( sour,             UVM_ALL_ON )      `uvm_field_enum( taste_e,  taste,  UVM_ALL_ON )   `uvm_object_utils_endclass sugar_free_jelly_bean_transaction extends jelly_bean_transaction;   `uvm_object_utils( sugar_free_jelly_bean_transaction )   constraint sugar_free_con {      sugar_free == 1;   }   function new( string name = "" );      super.new( name );   endfunction: newclass one_jelly_bean_sequence extends uvm_sequence#( jelly_bean_transaction );   `uvm_object_utils( one_jelly_bean_sequence )   function new( string name = "" );      super.new( name );   endfunction: new   task body();      jelly_bean_transaction jb_tx;      jb_tx = jelly_bean_transaction::type_id::create( .name( "jb_tx" ) );      start_item( jb_tx );`ifndef CL_USE_MODELSIM      assert( jb_tx.randomize() );`endif      finish_item( jb_tx );   endtask: bodyclass same_flavored_jelly_beans_sequence extends uvm_sequence#( jelly_bean_transaction );   rand int unsigned num_jelly_beans; // knob   constraint num_jelly_beans_con { num_jelly_beans inside { [2:4] }; }   function new( string name = "" );      super.new( name );   endfunction: new   task body();      jelly_bean_transaction           jb_tx;      jelly_bean_transaction::flavor_e jb_flavor;      jb_tx = jelly_bean_transaction::type_id::create( .name( "jb_tx" ) );`ifndef CL_USE_MODELSIM      assert( jb_tx.randomize() );`endif      jb_flavor = jb_tx.flavor;      repeat ( num_jelly_beans ) begin	 jb_tx = jelly_bean_transaction::type_id::create( .name( "jb_tx" ) );	 start_item( jb_tx );`ifndef CL_USE_MODELSIM	 assert( jb_tx.randomize() with { jb_tx.flavor == jb_flavor; } );`endif	 finish_item( jb_tx );      end   endtask: body   `uvm_object_utils_begin( same_flavored_jelly_beans_sequence )      `uvm_field_int( num_jelly_beans, UVM_ALL_ON )   `uvm_object_utils_endclass gift_boxed_jelly_beans_sequence extends uvm_sequence#( jelly_bean_transaction );   rand int unsigned num_jelly_bean_flavors; // knob   constraint num_jelly_bean_flavors_con { num_jelly_bean_flavors inside { [2:3] }; }   function new( string name = "" );      super.new( name );   endfunction: new   task body();      same_flavored_jelly_beans_sequence jb_seq;      repeat ( num_jelly_bean_flavors ) begin	 jb_seq = same_flavored_jelly_beans_sequence::type_id::create( .name( "jb_seq" ) );`ifndef CL_USE_MODELSIM	 assert( jb_seq.randomize() );`endif	 jb_seq.start( m_sequencer );      end   endtask: body   `uvm_object_utils_begin( gift_boxed_jelly_beans_sequence )      `uvm_field_int( num_jelly_bean_flavors, UVM_ALL_ON )   `uvm_object_utils_endclass jelly_bean_driver extends uvm_driver#( jelly_bean_transaction );   `uvm_component_utils( jelly_bean_driver )   virtual jelly_bean_if jb_vi;   function new( string name, uvm_component parent );      super.new( name, parent );   endfunction: new   function void build_phase( uvm_phase phase );      super.build_phase( phase );      void'( uvm_resource_db#( virtual jelly_bean_if )::read_by_name	     ( .scope( "ifs" ), .name( "jelly_bean_if" ), .val( jb_vi ) ) );   endfunction: build_phase   task run_phase( uvm_phase phase );      jelly_bean_transaction jb_tx;      forever begin	 @jb_vi.master_cb;	 jb_vi.master_cb.flavor <= jelly_bean_transaction::NO_FLAVOR;	 seq_item_port.get_next_item( jb_tx );	 @jb_vi.master_cb;	 jb_vi.master_cb.flavor     <= jb_tx.flavor;	 jb_vi.master_cb.color      <= jb_tx.color;	 jb_vi.master_cb.sugar_free <= jb_tx.sugar_free;	 jb_vi.master_cb.sour       <= jb_tx.sour;	 seq_item_port.item_done();      end   endtask: run_phaseclass jelly_bean_monitor extends uvm_monitor;   `uvm_component_utils( jelly_bean_monitor )   uvm_analysis_port#( jelly_bean_transaction ) jb_ap;   virtual jelly_bean_if jb_vi;   function new( string name, uvm_component parent );      super.new( name, parent );   endfunction: new   function void build_phase( uvm_phase phase );      super.build_phase( phase );      void'( uvm_resource_db#( virtual jelly_bean_if )::read_by_name	     ( .scope( "ifs" ), .name( "jelly_bean_if" ), .val( jb_vi ) ) );      jb_ap = new( .name( "jb_ap" ), .parent( this ) );   endfunction: build_phase   task run_phase( uvm_phase phase );      forever begin	 jelly_bean_transaction jb_tx;	 @jb_vi.slave_cb;	 if ( jb_vi.slave_cb.flavor != jelly_bean_transaction::NO_FLAVOR ) begin	    jb_tx = jelly_bean_transaction::type_id::create( .name( "jb_tx" ) );	    jb_tx.flavor     = jelly_bean_transaction::flavor_e'( jb_vi.slave_cb.flavor );	    jb_tx.color      = jelly_bean_transaction::color_e' ( jb_vi.slave_cb.color  );	    jb_tx.sugar_free = jb_vi.slave_cb.sugar_free;	    jb_tx.sour       = jb_vi.slave_cb.sour;	    @jb_vi.master_cb;	    jb_tx.taste = jelly_bean_transaction::taste_e'( jb_vi.master_cb.taste );	    jb_ap.write( jb_tx );	 end      end   endtask: run_phaseclass jelly_bean_agent extends uvm_agent;   `uvm_component_utils( jelly_bean_agent )   uvm_analysis_port#( jelly_bean_transaction ) jb_ap;        jelly_bean_sequencer jb_seqr;   jelly_bean_driver    jb_drvr;   jelly_bean_monitor   jb_mon;   function new( string name, uvm_component parent );      super.new( name, parent );   endfunction: new   function void build_phase( uvm_phase phase );      super.build_phase( phase );      jb_ap = new( .name( "jb_ap" ), .parent( this ) );      jb_seqr = jelly_bean_sequencer::type_id::create( .name( "jb_seqr" ), .parent( this ) );      jb_drvr = jelly_bean_driver   ::type_id::create( .name( "jb_drvr" ), .parent( this ) );      jb_mon  = jelly_bean_monitor  ::type_id::create( .name( "jb_mon"  ), .parent( this ) );   endfunction: build_phase   function void connect_phase( uvm_phase phase );      super.connect_phase( phase );      jb_drvr.seq_item_port.connect( jb_seqr.seq_item_export );      jb_mon.jb_ap.connect( jb_ap );   endfunction: connect_phaseclass jelly_bean_fc_subscriber extends uvm_subscriber#( jelly_bean_transaction );   `uvm_component_utils( jelly_bean_fc_subscriber )   jelly_bean_transaction jb_tx;`ifndef CL_USE_MODELSIM   covergroup jelly_bean_cg;      flavor_cp:     coverpoint jb_tx.flavor;      color_cp:      coverpoint jb_tx.color;      sugar_free_cp: coverpoint jb_tx.sugar_free;      sour_cp:       coverpoint jb_tx.sour;      cross flavor_cp, color_cp, sugar_free_cp, sour_cp;   endgroup: jelly_bean_cg`endif   function new( string name, uvm_component parent );      super.new( name, parent );`ifndef CL_USE_MODELSIM      jelly_bean_cg = new;`endif   endfunction: new   function void write( jelly_bean_transaction t );      jb_tx = t;`ifndef CL_USE_MODELSIM      jelly_bean_cg.sample();`endif   endfunction: writetypedef class jelly_bean_scoreboard;   class jelly_bean_sb_subscriber extends uvm_subscriber#( jelly_bean_transaction );   `uvm_component_utils( jelly_bean_sb_subscriber )   function new( string name, uvm_component parent );      super.new( name, parent );   endfunction: new   function void write( jelly_bean_transaction t );      jelly_bean_scoreboard jb_sb;            $cast( jb_sb, m_parent );      jb_sb.check_jelly_bean_taste( t );   endfunction: writeclass jelly_bean_scoreboard extends uvm_scoreboard;   `uvm_component_utils( jelly_bean_scoreboard )   uvm_analysis_export#( jelly_bean_transaction ) jb_analysis_export;   local jelly_bean_sb_subscriber jb_sb_sub;      function new( string name, uvm_component parent );      super.new( name, parent );   endfunction: new   function void build_phase( uvm_phase phase );      super.build_phase( phase );      jb_analysis_export = new( .name( "jb_analysis_export" ), .parent( this ) );      jb_sb_sub = jelly_bean_sb_subscriber::type_id::create( .name( "jb_sb_sub" ), .parent( this ) );   endfunction: build_phase   function void connect_phase( uvm_phase phase );      super.connect_phase( phase );      jb_analysis_export.connect( jb_sb_sub.analysis_export );   endfunction: connect_phase   virtual function void check_jelly_bean_taste( jelly_bean_transaction jb_tx );      uvm_table_printer p = new;      if ( jb_tx.flavor == jelly_bean_transaction::CHOCOLATE && jb_tx.sour &&	   jb_tx.taste  == jelly_bean_transaction::YUMMY ) begin	 `uvm_error( "jelly_bean_scoreboard", 		     { "You lost sense of taste!\n", jb_tx.sprint( p ) } );      end else begin	 `uvm_info( "jelly_bean_scoreboard",		    { "You have a good sense of taste.\n", jb_tx.sprint( p ) },		    UVM_LOW );      end   endfunction: check_jelly_bean_tasteclass jelly_bean_env extends uvm_env;   `uvm_component_utils( jelly_bean_env )   jelly_bean_agent         jb_agent;   jelly_bean_fc_subscriber jb_fc_sub;   jelly_bean_scoreboard    jb_sb;   function new( string name, uvm_component parent );      super.new( name, parent );   endfunction: new   function void build_phase( uvm_phase phase );      super.build_phase( phase );      jb_agent  = jelly_bean_agent        ::type_id::create( .name( "jb_agent"  ), .parent( this ) );      jb_fc_sub = jelly_bean_fc_subscriber::type_id::create( .name( "jb_fc_sub" ), .parent( this ) );      jb_sb     = jelly_bean_scoreboard   ::type_id::create( .name( "jb_sb"     ), .parent( this ) );    endfunction: build_phase   function void connect_phase( uvm_phase phase );      super.connect_phase( phase );      jb_agent.jb_ap.connect( jb_fc_sub.analysis_export );      jb_agent.jb_ap.connect( jb_sb.jb_analysis_export );   endfunction: connect_phaseclass jelly_bean_test extends uvm_test;   `uvm_component_utils( jelly_bean_test )   jelly_bean_env jb_env;   function new( string name, uvm_component parent );      super.new( name, parent );   endfunction: new   function void build_phase( uvm_phase phase );      super.build_phase( phase );      begin	 jelly_bean_configuration jb_cfg;	 jb_cfg = new;`ifndef CL_USE_MODELSIM	 assert( jb_cfg.randomize() );`endif	 uvm_config_db#( jelly_bean_configuration )::set	   ( .cntxt( this ), .inst_name( "*" ), .field_name( "config" ), .value( jb_cfg ) );	 	 jelly_bean_transaction::type_id::set_type_override	   ( sugar_free_jelly_bean_transaction::get_type() );	 jb_env = jelly_bean_env::type_id::create( .name( "jb_env" ), .parent( this ) );      end   endfunction: build_phase   task run_phase( uvm_phase phase );      gift_boxed_jelly_beans_sequence jb_seq;      phase.raise_objection( .obj( this ) );      jb_seq = gift_boxed_jelly_beans_sequence::type_id::create( .name( "jb_seq" ) );`ifndef CL_USE_MODELSIM      assert( jb_seq.randomize() );`endif      `uvm_info( "jelly_bean_test", { "\n", jb_seq.sprint() }, UVM_LOW )      jb_seq.start( jb_env.jb_agent.jb_seqr );      #10ns ;      phase.drop_objection( .obj( this ) );   endtask: run_phaseclass jelly_bean_order_sequence extends uvm_sequence#( jelly_bean_transaction );  `uvm_object_utils( jelly_bean_order_sequence )  rand int unsigned num_jelly_beans; // knob  rand flavor_e     jb_flavor;  //----------------------------------------------------------------------------  // Function: new  //----------------------------------------------------------------------------  function new( string name = "jelly_bean_order_sequence" );    super.new( name );  endfunction: new  //----------------------------------------------------------------------------  // Task: body  //----------------------------------------------------------------------------     task body();    jelly_bean_transaction jb_tx;    repeat ( num_jelly_beans ) begin      jb_tx = jelly_bean_transaction::type_id::create( .name( get_name() ) );      start_item( jb_tx );      assert( jb_tx.randomize() with { jb_tx.flavor == jb_flavor; } );      finish_item( jb_tx );    end  endtask: body     //----------------------------------------------------------------------------  // Function: do_copy  //----------------------------------------------------------------------------  virtual function void do_copy( uvm_object rhs );    jelly_bean_order_sequence that;    if ( ! $cast( that, rhs ) ) begin	  `uvm_error( get_name(), "rhs is not a jelly_bean_order_sequence" )	  return;    end    super.do_copy( rhs );    this.num_jelly_beans = that.num_jelly_beans;    this.jb_flavor       = that.jb_flavor;  endfunction: do_copy     //----------------------------------------------------------------------------  // Function: do_compare  //----------------------------------------------------------------------------  virtual function bit do_compare( uvm_object rhs, uvm_comparer comparer );    jelly_bean_order_sequence that;    if ( ! $cast( that, rhs ) ) return 0;    return ( super.do_compare( rhs, comparer )            &&             this.num_jelly_beans == that.num_jelly_beans &&	      	 this.jb_flavor       == that.jb_flavor );  endfunction: do_compare  //----------------------------------------------------------------------------  // Function: convert2string  //----------------------------------------------------------------------------     virtual function string convert2string();    string s = super.convert2string();    s = { s, $sformatf( "num_jelly_beans=%0d jb_flavor=%s",                         num_jelly_beans, jb_flavor.name() ) };    return s;  endfunction: convert2stringclass jelly_bean_fc_subscriber extends uvm_subscriber#( jelly_bean_transaction );  `uvm_component_utils( jelly_bean_fc_subscriber )  jelly_bean_transaction jb_tx;    //----------------------------------------------------------------------------  // Covergroup: jelly_bean_cg  //----------------------------------------------------------------------------  covergroup jelly_bean_cg;    flavor_cp:     coverpoint jb_tx.flavor;    color_cp:      coverpoint jb_tx.color;    sugar_free_cp: coverpoint jb_tx.sugar_free;    sour_cp:       coverpoint jb_tx.sour;    cross flavor_cp, color_cp, sugar_free_cp, sour_cp;  endgroup: jelly_bean_cg  //----------------------------------------------------------------------------  // Function: new  //----------------------------------------------------------------------------  function new( string name, uvm_component parent );    super.new( name, parent );    jelly_bean_cg = new;  endfunction: new  //----------------------------------------------------------------------------  // Function: write  //----------------------------------------------------------------------------  function void write( jelly_bean_transaction t );    jb_tx = t;    jelly_bean_cg.sample();  endfunction: write  class jelly_bean_sb_subscriber extends uvm_subscriber#( jelly_bean_transaction );  `uvm_component_utils( jelly_bean_sb_subscriber )    //----------------------------------------------------------------------------  // Function: new  //----------------------------------------------------------------------------  function new( string name, uvm_component parent );    super.new( name, parent );  endfunction: new    //----------------------------------------------------------------------------  // Function: write  //----------------------------------------------------------------------------  function void write( jelly_bean_transaction t );    if (     t.flavor == CHOCOLATE && t.sour   && t.taste == YUMMY ||         ! ( t.flavor == CHOCOLATE && t.sour ) && t.taste == YUCKY ) begin      `uvm_error( get_name(), { "You lost sense of taste!", t.convert2string() } )    end else begin      `uvm_info( get_name(), { "You have a good sense of taste.", t.convert2string() }, UVM_HIGH )    end  endfunction: write  class jelly_bean_env extends uvm_env;  `uvm_component_utils( jelly_bean_env )  jelly_bean_agent         jb_agent;  jelly_bean_fc_subscriber jb_fc;  jelly_bean_sb_subscriber jb_sb;    //----------------------------------------------------------------------------  // Function: new  //----------------------------------------------------------------------------  function new( string name, uvm_component parent );    super.new( name, parent );  endfunction: new    //----------------------------------------------------------------------------  // Function: build_phase  //----------------------------------------------------------------------------    function void build_phase( uvm_phase phase );    super.build_phase( phase );    jb_agent = jelly_bean_agent        ::type_id::create( .name( "jb_agent" ), .parent( this ) );    jb_fc    = jelly_bean_fc_subscriber::type_id::create( .name( "jb_fc"    ), .parent( this ) );    jb_sb    = jelly_bean_sb_subscriber::type_id::create( .name( "jb_sb"    ), .parent( this ) );  endfunction: build_phase    //----------------------------------------------------------------------------  // Function: connect_phase  //----------------------------------------------------------------------------  function void connect_phase( uvm_phase phase );    super.connect_phase( phase );    jb_agent.jb_ap.connect( jb_fc.analysis_export );    jb_agent.jb_ap.connect( jb_sb.analysis_export );  endfunction: connect_phase  class jelly_bean_sequencer extends uvm_sequencer#( jelly_bean_transaction );  `uvm_component_utils( jelly_bean_sequencer )    //----------------------------------------------------------------------------  // Function: new  //----------------------------------------------------------------------------  function new( string name, uvm_component parent );    super.new( name, parent );  endfunction: new    //----------------------------------------------------------------------------  // Function: user_priority_arbitration  //----------------------------------------------------------------------------  virtual function integer user_priority_arbitration( integer avail_sequences[$] );    if ( avail_sequences.size() >= 2 ) return avail_sequences[1]; // second entry    else                               return avail_sequences[0];  endfunction: user_priority_arbitrationclass jelly_bean_driver extends uvm_driver#( jelly_bean_transaction );  `uvm_component_utils( jelly_bean_driver )  virtual jelly_bean_if jb_vi;    //----------------------------------------------------------------------------  // Function: new  //----------------------------------------------------------------------------  function new( string name, uvm_component parent );    super.new( name, parent );  endfunction: new  //----------------------------------------------------------------------------  // Function: build_phase  //----------------------------------------------------------------------------  function void build_phase( uvm_phase phase );    super.build_phase( phase );    if ( ! uvm_config_db#( virtual jelly_bean_if )::get         ( .cntxt( this ), .inst_name( "" ), .field_name( "jb_if" ), .value( jb_vi ) ) ) begin      `uvm_fatal( get_name(), "jb_if not found" )    end	  endfunction: build_phase  //----------------------------------------------------------------------------  // Function: main_phase  //----------------------------------------------------------------------------  task main_phase( uvm_phase phase );    jelly_bean_transaction jb_tx;    forever begin      jb_vi.master_cb.flavor <= NO_FLAVOR;      seq_item_port.get_next_item( jb_tx );      `uvm_info( get_name(), jb_tx.convert2string(), UVM_LOW );      phase.raise_objection( .obj( this ), .description( get_name() ) );      @jb_vi.master_cb;      jb_vi.master_cb.flavor     <= jb_tx.flavor;      jb_vi.master_cb.color      <= jb_tx.color;      jb_vi.master_cb.sugar_free <= jb_tx.sugar_free;      jb_vi.master_cb.sour       <= jb_tx.sour;      seq_item_port.item_done();      @jb_vi.master_cb;      phase.drop_objection( .obj( this ), .description( get_name() ) );    end  endtask: main_phase  class jelly_bean_monitor extends uvm_monitor;  `uvm_component_utils( jelly_bean_monitor )  uvm_analysis_port#( jelly_bean_transaction ) jb_ap;    virtual jelly_bean_if jb_vi;    //----------------------------------------------------------------------------  // Function: new  //----------------------------------------------------------------------------  function new( string name, uvm_component parent );    super.new( name, parent );  endfunction: new  //----------------------------------------------------------------------------  // Function: build_phase  //----------------------------------------------------------------------------    function void build_phase( uvm_phase phase );    super.build_phase( phase );    if ( ! uvm_config_db#( virtual jelly_bean_if )::get         ( .cntxt( this ), .inst_name( "" ), .field_name( "jb_if" ), .value( jb_vi ) ) ) begin      `uvm_fatal( get_name(), "jb_if not found" )    end	    jb_ap = new( .name( "jb_ap" ), .parent( this ) );  endfunction: build_phase    //----------------------------------------------------------------------------  // Function: main_phase  //----------------------------------------------------------------------------  task main_phase( uvm_phase phase );    forever begin      jelly_bean_transaction jb_tx;            @jb_vi.slave_cb;      if ( jb_vi.slave_cb.flavor != NO_FLAVOR ) begin        phase.raise_objection( .obj( this ), .description( get_name() ) );        jb_tx = jelly_bean_transaction::type_id::create( .name( "jb_tx" ) );        jb_tx.flavor     = flavor_e'( jb_vi.slave_cb.flavor );        jb_tx.color      =  color_e'( jb_vi.slave_cb.color  );        jb_tx.sugar_free = jb_vi.slave_cb.sugar_free;        jb_tx.sour       = jb_vi.slave_cb.sour;        @jb_vi.master_cb;        jb_tx.taste = taste_e'( jb_vi.master_cb.taste );        jb_ap.write( jb_tx );        phase.drop_objection( .obj( this ), .description( get_name() ) );      end    end  endtask: main_phase  class jelly_bean_agent extends uvm_agent;  `uvm_component_utils( jelly_bean_agent )  uvm_analysis_port#( jelly_bean_transaction ) jb_ap;  jelly_bean_sequencer jb_seqr;  jelly_bean_driver    jb_drvr;  jelly_bean_monitor   jb_mon;    //----------------------------------------------------------------------------  // Function: new  //----------------------------------------------------------------------------  function new( string name, uvm_component parent );    super.new( name, parent );  endfunction: new  //----------------------------------------------------------------------------  // Function: build_phase  //----------------------------------------------------------------------------    function void build_phase( uvm_phase phase );    super.build_phase( phase );    jb_ap   = new( .name( "jb_ap" ), .parent( this ) );    jb_seqr = jelly_bean_sequencer::type_id::create( .name( "jb_seqr" ), .parent( this ) );    jb_drvr = jelly_bean_driver   ::type_id::create( .name( "jb_drvr" ), .parent( this ) );    jb_mon  = jelly_bean_monitor  ::type_id::create( .name( "jb_mon"  ), .parent( this ) );  endfunction: build_phase    //----------------------------------------------------------------------------  // Function: connect_phase  //----------------------------------------------------------------------------  function void connect_phase( uvm_phase phase );    super.connect_phase( phase );    jb_drvr.seq_item_port.connect( jb_seqr.seq_item_export );    jb_mon.jb_ap.connect( jb_ap );  endfunction: connect_phase  class jelly_bean_test extends uvm_test;  `uvm_component_utils( jelly_bean_test )  jelly_bean_env jb_env;  //----------------------------------------------------------------------------  // Function: new  //----------------------------------------------------------------------------  function new( string name, uvm_component parent );    super.new( name, parent );  endfunction: new  //----------------------------------------------------------------------------  // Function: build_phase  //----------------------------------------------------------------------------  function void build_phase( uvm_phase phase );    super.build_phase( phase );    jb_env = jelly_bean_env::type_id::create( .name( "jb_env" ), .parent( this ) );  endfunction: build_phase  //----------------------------------------------------------------------------  // task: main_phase  //----------------------------------------------------------------------------  task main_phase( uvm_phase phase );    jelly_bean_order_sequence standard_order_seq;    jelly_bean_order_sequence priority_order_seq1;    jelly_bean_order_sequence priority_order_seq2;    jelly_bean_order_sequence overnight_order_seq;    standard_order_seq  = jelly_bean_order_sequence::type_id::create( "standard_order_seq" );    priority_order_seq1 = jelly_bean_order_sequence::type_id::create( "priority_order_seq1" );    priority_order_seq2 = jelly_bean_order_sequence::type_id::create( "priority_order_seq2" );    overnight_order_seq = jelly_bean_order_sequence::type_id::create( "overnight_order_seq" );        assert( standard_order_seq .randomize() with { num_jelly_beans == 4; jb_flavor == APPLE;      } );    assert( priority_order_seq1.randomize() with { num_jelly_beans == 4; jb_flavor == BLUEBERRY;  } );    assert( priority_order_seq2.randomize() with { num_jelly_beans == 4; jb_flavor == BUBBLE_GUM; } );    assert( overnight_order_seq.randomize() with { num_jelly_beans == 4; jb_flavor == CHOCOLATE;  } );        standard_order_seq .set_starting_phase( phase );    priority_order_seq1.set_starting_phase( phase );    priority_order_seq2.set_starting_phase( phase );    overnight_order_seq.set_starting_phase( phase );        standard_order_seq .set_automatic_phase_objection( .value( 1 ) );    priority_order_seq1.set_automatic_phase_objection( .value( 1 ) );    priority_order_seq2.set_automatic_phase_objection( .value( 1 ) );    overnight_order_seq.set_automatic_phase_objection( .value( 1 ) );        //jb_env.jb_agent.jb_seqr.set_arbitration( UVM_SEQ_ARB_FIFO ); // default    //jb_env.jb_agent.jb_seqr.set_arbitration( UVM_SEQ_ARB_RANDOM );    //jb_env.jb_agent.jb_seqr.set_arbitration( UVM_SEQ_ARB_STRICT_FIFO );    //jb_env.jb_agent.jb_seqr.set_arbitration( UVM_SEQ_ARB_STRICT_RANDOM );    //jb_env.jb_agent.jb_seqr.set_arbitration( UVM_SEQ_ARB_WEIGHTED );    //jb_env.jb_agent.jb_seqr.set_arbitration( UVM_SEQ_ARB_USER );    fork      standard_order_seq .start( jb_env.jb_agent.jb_seqr, .this_priority( 100 ) ); // default priority      priority_order_seq1.start( jb_env.jb_agent.jb_seqr, .this_priority( 200 ) );      priority_order_seq2.start( jb_env.jb_agent.jb_seqr, .this_priority( 200 ) );      overnight_order_seq.start( jb_env.jb_agent.jb_seqr, .this_priority( 300 ) );    join  endtask: main_phaseclass jelly_bean_transaction extends uvm_sequence_item;  `uvm_object_utils( jelly_bean_transaction )    rand flavor_e flavor;  rand color_e  color;  rand bit      sugar_free;  rand bit      sour;  taste_e       taste;    constraint flavor_color_con {    flavor != NO_FLAVOR;    flavor == APPLE     -> color != BLUE;    flavor == BLUEBERRY -> color == BLUE;  }    //----------------------------------------------------------------------------  // Function: new  //----------------------------------------------------------------------------  function new( string name = "jelly_bean_transaction" );    super.new( name );  endfunction: new    //----------------------------------------------------------------------------  // Function: do_copy  //----------------------------------------------------------------------------  virtual function void do_copy( uvm_object rhs );    jelly_bean_transaction that;    if ( ! $cast( that, rhs ) ) begin      `uvm_error( get_name(), "rhs is not a jelly_bean_transaction" )      return;    end    super.do_copy( rhs );    this.flavor     = that.flavor;    this.color      = that.color;    this.sugar_free = that.sugar_free;    this.sour       = that.sour;    this.taste      = that.taste;  endfunction: do_copy    //----------------------------------------------------------------------------  // Function: do_compare  //----------------------------------------------------------------------------  virtual function bit do_compare( uvm_object rhs, uvm_comparer comparer );    jelly_bean_transaction that;    if ( ! $cast( that, rhs ) ) return 0;    return ( super.do_compare( rhs, comparer )  &&             this.flavor     == that.flavor     &&             this.color      == that.color      &&             this.sugar_free == that.sugar_free &&             this.sour       == that.sour       &&             this.taste      == that.taste );  endfunction: do_compare  //----------------------------------------------------------------------------  // Function: convert2string  //----------------------------------------------------------------------------    virtual function string convert2string();    string s = super.convert2string();        s = { s, $sformatf( "\nname      : %s", get_name() ) };    s = { s, $sformatf( "\nflavor    : %s", flavor.name() ) };    s = { s, $sformatf( "\ncolor     : %s", color.name() ) };    s = { s, $sformatf( "\nsugar_free: %b", sugar_free ) };    s = { s, $sformatf( "\nsour      : %b", sour ) };    s = { s, $sformatf( "\ntaste     : %s", taste.name() ) };"/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="same_flavored_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <field type="constraint num_jelly_beans_con { num_jelly_beans inside { [2:4]" name="}"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="flavor_e" name="jb_flavor"/>
    </task>
</class>
<class name="gift_boxed_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <field type="constraint num_jelly_bean_flavors_con { num_jelly_bean_flavors inside { [2:3]" name="}"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="jb_seq"/>
    </task>
</class>
<class name="jelly_bean_reg_sequence" superClass="uvm_reg_sequence;">
    <comments comm=""/>
    <task name="body">
        <param>
        </param>
        <comments comm="// for debug// for ( int k = 0; k < 2; k++ )// shorthand// back-door writes"/>
        <field type="$display( "jb_partnership_reg_block.get_full_hdl_path[%0d] is paths[i]" name=")"/>
    </task>
</class>
<class name="jelly_bean_recipe_reg" superClass="uvm_reg;">
    <comments comm=""/>
    <field type="flavor.value" name="!"/>
    <function return="void" name="build">
        <param>
        </param>
        <comments comm="// for back-door access"/>
    </function>
</class>
<class name="jelly_bean_taste_reg" superClass="uvm_reg;">
    <comments comm=""/>
    <field type="rand uvm_reg_field" name="taste"/>
    <function return="void" name="build">
        <param>
        </param>
        <comments comm="// for back-door access"/>
    </function>
</class>
<class name="jelly_bean_reg_block" superClass="uvm_reg_block;">
    <comments comm=""/>
    <field type="uvm_reg_map" name="reg_map"/>
    <function return="void" name="build">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_partnership_reg_block" superClass="uvm_reg_block;">
    <comments comm=""/>
    <field type="uvm_reg_map" name="reg_map"/>
    <function return="void" name="build">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_reg_adapter" superClass="uvm_reg_adapter;">
    <comments comm=""/>
    <function return="uvm_sequence_item" name="reg2bus">
        <param>
        </param>
        <comments comm=""/>
        <field type="else" name="jb_tx.command"/>
    </function>
    <function return="void" name="bus2reg">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </function>
</class>
<class name="jelly_bean_base_test" superClass="uvm_test;">
    <comments comm=""/>
    <field type="jelly_bean_partnership_reg_block" name="jb_partnership_reg_block"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm="// shorthand// finalize the address mapping"/>
        <field type="jelly_bean_recipe_reg" name="jb_recipe_reg"/>
    </function>
    <function return="void" name="start_of_simulation_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_reg_test" superClass="jelly_bean_base_test;">
    <comments comm=""/>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_reg_sequence" name="jb_reg_seq"/>
    </task>
</class>
<class name="jelly_bean_reg_hw_reset_test" superClass="jelly_bean_base_test;">
    <comments comm=""/>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="uvm_reg_hw_reset_seq" name="reg_hw_reset_seq"/>
    </task>
</class>
<class name="jelly_bean_fc_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <field type="cross" name="sour_cp"/>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_sb_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_env_config" superClass="uvm_object;">
    <comments comm=""/>
    <field type="jelly_bean_partnership_reg_block" name="jb_partnership_reg_block"/>
</class>
<class name="jelly_bean_env" superClass="uvm_env;">
    <comments comm=""/>
    <field type="jelly_bean_reg_predictor" name="jb_reg_predictor"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm="// if the top-level env"/>
    </function>
</class>
<class name="jelly_bean_driver" superClass="uvm_driver#(">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_monitor" superClass="uvm_monitor;">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_agent_config" superClass="uvm_object;">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
</class>
<class name="jelly_bean_agent" superClass="uvm_agent;">
    <comments comm=""/>
    <field type="jelly_bean_reg_adapter" name="jb_reg_adapter"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_transaction" superClass="uvm_sequence_item;">
    <comments comm=""/>
    <field type="flavor" name="!"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
</class>
<class name="sugar_free_jelly_bean_transaction" superClass="jelly_bean_transaction;">
    <comments comm=""/>
</class>
<class name="jelly_bean_configuration" superClass="uvm_object;">
    <comments comm=""/>
</class>
<class name="jelly_bean_transaction" superClass="uvm_sequence_item;">
    <comments comm=""/>
    <field type="flavor" name="!"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="void" name="do_pack">
        <param>
        </param>
        <comments comm="// reserved bit// reserved bits"/>
        <field type="bit [5:0]" name="R6"/>
    </function>
    <function return="void" name="do_unpack">
        <param>
        </param>
        <comments comm="// reserved bit// reserved bits"/>
        <field type="bit [5:0]" name="R6"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
</class>
<class name="sugar_free_jelly_bean_transaction" superClass="jelly_bean_transaction;">
    <comments comm=""/>
</class>
<class name="jelly_bean_driver" superClass="uvm_driver#(jelly_bean_transaction);">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
    <task name="run_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_monitor" superClass="uvm_monitor;">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
    <task name="run_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_agent" superClass="uvm_agent;">
    <comments comm=""/>
    <field type="jelly_bean_monitor" name="jb_mon"/>
    <function return="void" name="build_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_fc_subscriber" superClass="uvm_subscriber#(jelly_bean_transaction);">
    <comments comm=""/>
    <field type="cross" name="sour_cp"/>
    <function return="void" name="write">
        <param>
            <field type="jelly_bean_transaction" name="t"/>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_scoreboard;" superClass="null">
    <comments comm=""/>
</class>
<class name="jelly_bean_sb_subscriber" superClass="uvm_subscriber#(jelly_bean_transaction);">
    <comments comm=""/>
    <function return="void" name="write">
        <param>
            <field type="jelly_bean_transaction" name="t"/>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_scoreboard" name="jb_sb"/>
    </function>
</class>
<class name="jelly_bean_scoreboard" superClass="uvm_scoreboard;">
    <comments comm=""/>
    <field type="local jelly_bean_sb_subscriber" name="jb_sb_sub"/>
    <function return="void" name="build_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="check_jelly_bean_taste">
        <param>
            <field type="jelly_bean_transaction" name="jb_tx"/>
        </param>
        <comments comm=""/>
        <field type="uvm_table_printer" name="p"/>
    </function>
</class>
<class name="jelly_bean_env" superClass="uvm_env;">
    <comments comm=""/>
    <field type="jelly_bean_scoreboard" name="jb_sb"/>
    <function return="void" name="build_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_test" superClass="uvm_test;">
    <comments comm=""/>
    <field type="jelly_bean_env" name="jb_env"/>
    <function return="void" name="build_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_configuration" name="jb_cfg"/>
    </function>
    <task name="run_phase">
        <param>
        </param>
        <comments comm="// copy jb_tx1 to jb_tx2// create jb_tx3 by packing and unpacking jb_tx1// check if jb_tx1, jb_tx2 and jb_tx3 have the same properties// print each object"/>
        <field type="int" name="num_bits"/>
    </task>
</class>
<class name="one_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="same_flavored_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <field type="constraint num_jelly_beans_con { num_jelly_beans inside { [2:4]" name="}"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="flavor_e" name="jb_flavor"/>
    </task>
</class>
<class name="gift_boxed_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <field type="constraint num_jelly_bean_flavors_con { num_jelly_bean_flavors inside { [2:3]" name="}"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="jb_seq"/>
    </task>
</class>
<class name="jelly_bean_reg_sequence" superClass="uvm_reg_sequence;">
    <comments comm=""/>
    <task name="body">
        <param>
        </param>
        <comments comm="// for debug// front-door write// front-door read// back-door writes// back-door reads"/>
        <field type="$display( "jb_reg_block.get_full_hdl_path[%0d] is paths[i]" name=")"/>
    </task>
</class>
<class name="jelly_bean_recipe_reg" superClass="uvm_reg;">
    <comments comm=""/>
    <field type="flavor.value" name="!"/>
    <function return="void" name="build">
        <param>
        </param>
        <comments comm="// for back-door access"/>
    </function>
</class>
<class name="jelly_bean_taste_reg" superClass="uvm_reg;">
    <comments comm=""/>
    <field type="rand uvm_reg_field" name="taste"/>
    <function return="void" name="build">
        <param>
        </param>
        <comments comm="// for back-door access"/>
    </function>
</class>
<class name="jelly_bean_reg_block" superClass="uvm_reg_block;">
    <comments comm=""/>
    <field type="uvm_reg_map" name="reg_map"/>
    <function return="void" name="build">
        <param>
        </param>
        <comments comm="// for back-door access// finalize the address mapping"/>
    </function>
</class>
<class name="jelly_bean_reg_adapter" superClass="uvm_reg_adapter;">
    <comments comm=""/>
    <function return="uvm_sequence_item" name="reg2bus">
        <param>
        </param>
        <comments comm=""/>
        <field type="else" name="jb_tx.command"/>
    </function>
    <function return="void" name="bus2reg">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </function>
</class>
<class name="jelly_bean_base_test" superClass="uvm_test;">
    <comments comm=""/>
    <field type="jelly_bean_reg_block" name="jb_reg_block"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="start_of_simulation_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_reg_test" superClass="jelly_bean_base_test;">
    <comments comm=""/>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_reg_sequence" name="jb_reg_seq"/>
    </task>
</class>
<class name="jelly_bean_reg_hw_reset_test" superClass="jelly_bean_base_test;">
    <comments comm=""/>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="uvm_reg_hw_reset_seq" name="reg_hw_reset_seq"/>
    </task>
</class>
<class name="jelly_bean_fc_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <field type="cross" name="sour_cp"/>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_sb_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_env_config" superClass="uvm_object;">
    <comments comm=""/>
    <field type="jelly_bean_reg_block" name="jb_reg_block"/>
</class>
<class name="jelly_bean_env" superClass="uvm_env;">
    <comments comm=""/>
    <field type="jelly_bean_reg_predictor" name="jb_reg_predictor"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm="// if the top-level env"/>
    </function>
</class>
<class name="jelly_bean_driver" superClass="uvm_driver#(">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_monitor" superClass="uvm_monitor;">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_agent_config" superClass="uvm_object;">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
</class>
<class name="jelly_bean_agent" superClass="uvm_agent;">
    <comments comm=""/>
    <field type="jelly_bean_reg_adapter" name="jb_reg_adapter"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_transaction" superClass="uvm_sequence_item;">
    <comments comm=""/>
    <field type="flavor" name="!"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
</class>
<class name="sugar_free_jelly_bean_transaction" superClass="jelly_bean_transaction;">
    <comments comm=""/>
</class>
<class name="one_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="same_flavored_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <field type="constraint num_jelly_beans_con { num_jelly_beans inside { [2:4]" name="}"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="flavor_e" name="jb_flavor"/>
    </task>
</class>
<class name="gift_boxed_jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <field type="constraint num_jelly_bean_flavors_con { num_jelly_bean_flavors inside { [2:3]" name="}"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="that"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_bean_sequence" name="jb_seq"/>
    </task>
</class>
<class name="json_printer" superClass="uvm_printer;">
    <comments comm=""/>
    <function return="string" name="emit">
        <param>
        </param>
        <comments comm="// begin JSON// last row// not last row// next level is deepr// begin nested JSON object// name-value pair// next level is shallower// end nested JSON object// foreach ( m_rows[i] )// end JSON"/>
        <field type="uvm_printer_row_info" name="row"/>
    </function>
</class>
<class name="jelly_bean_fc_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <field type="cross" name="sour_cp"/>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_sb_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <field type="json_printer" name="json_p"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_env" superClass="uvm_env;">
    <comments comm=""/>
    <field type="jelly_bean_sb_subscriber" name="jb_sb"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_driver" superClass="uvm_driver#(">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_monitor" superClass="uvm_monitor;">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_vi"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_agent" superClass="uvm_agent;">
    <comments comm=""/>
    <field type="jelly_bean_monitor" name="jb_mon"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_test" superClass="uvm_test;">
    <comments comm=""/>
    <field type="jelly_bean_env" name="jb_env"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_bean_sequence" name="jb_seq"/>
    </task>
</class>
<class name="jelly_bean_transaction" superClass="uvm_sequence_item;">
    <comments comm=""/>
    <field type="flavor" name="!"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="void" name="do_print">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
</class>
<class name="sugar_free_jelly_bean_transaction" superClass="jelly_bean_transaction;">
    <comments comm=""/>
</class>
<class name="jelly_bean_types;" superClass="null">
    <comments comm=""/>
    <field type="typedef enum bit[1:0] {" name="WRITE"/>
</class>
<class name="jelly_bean_transaction" superClass="uvm_sequence_item;">
    <comments comm=""/>
    <field type="flavor" name="!"/>
</class>
<class name="sugar_free_jelly_bean_transaction" superClass="jelly_bean_transaction;">
    <comments comm=""/>
</class>
<class name="jelly_bean_recipe_reg" superClass="uvm_reg;">
    <comments comm=""/>
    <field type="flavor.value" name="!"/>
    <function return="void" name="build">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_taste_reg" superClass="uvm_reg;">
    <comments comm=""/>
    <field type="rand uvm_reg_field" name="taste"/>
    <function return="void" name="build">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_reg_block" superClass="uvm_reg_block;">
    <comments comm=""/>
    <field type="uvm_reg_map" name="reg_map"/>
    <function return="void" name="build">
        <param>
        </param>
        <comments comm="// finalize the address mapping"/>
    </function>
</class>
<class name="jelly_bean_reg_adapter" superClass="uvm_reg_adapter;">
    <comments comm=""/>
    <function return="uvm_sequence_item" name="reg2bus">
        <param>
        </param>
        <comments comm=""/>
        <field type="else" name="jb_tx.command"/>
    </function>
    <function return="void" name="bus2reg">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </function>
</class>
<class name="jelly_bean_agent_config" superClass="uvm_object;">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_if"/>
</class>
<class name="jelly_bean_env_config" superClass="uvm_object;">
    <comments comm=""/>
    <field type="jelly_bean_reg_block" name="jb_reg_block"/>
</class>
<class name="jelly_bean_sequence" superClass="uvm_sequence#(">
    <comments comm=""/>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_reg_sequence" superClass="uvm_reg_sequence;">
    <comments comm=""/>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="uvm_reg_data_t" name="value"/>
    </task>
</class>
<class name="jelly_bean_driver" superClass="uvm_driver#(">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_if"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_monitor" superClass="uvm_monitor;">
    <comments comm=""/>
    <field type="virtual jelly_bean_if" name="jb_if"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
</class>
<class name="jelly_bean_agent" superClass="uvm_agent;">
    <comments comm=""/>
    <field type="jelly_bean_reg_adapter" name="jb_reg_adapter"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_fc_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <field type="cross" name="sour_cp"/>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_scoreboard;" superClass="null">
    <comments comm=""/>
</class>
<class name="jelly_bean_sb_subscriber" superClass="uvm_subscriber#(">
    <comments comm=""/>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_scoreboard" name="jb_sb"/>
    </function>
</class>
<class name="jelly_bean_scoreboard" superClass="uvm_scoreboard;">
    <comments comm=""/>
    <field type="local jelly_bean_sb_subscriber" name="jb_sb_sub"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="check_jelly_bean_taste">
        <param>
        </param>
        <comments comm=""/>
        <field type="uvm_table_printer" name="p"/>
    </function>
</class>
<class name="jelly_bean_env" superClass="uvm_env;">
    <comments comm=""/>
    <field type="jelly_bean_reg_predictor" name="jb_reg_predictor"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm="// if the top-level env"/>
    </function>
</class>
<class name="jelly_bean_base_test" superClass="uvm_test;">
    <comments comm=""/>
    <field type="jelly_bean_reg_block" name="jb_reg_block"/>
    <function return="void" name="build_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="start_of_simulation_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
</class>
<class name="jelly_bean_reg_test" superClass="jelly_bean_base_test;">
    <comments comm=""/>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_reg_sequence" name="jb_reg_seq"/>
    </task>
</class>
<class name="jelly_bean_reg_hw_reset_test" superClass="jelly_bean_base_test;">
    <comments comm=""/>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="uvm_reg_hw_reset_seq" name="reg_hw_reset_seq"/>
    </task>
</class>
<interface nome="jelly_bean_if(">
    <comments comm=""/>
    <field type="output" name="taste"/>
    <modport name=" master_mp">
        <field type="input" name="sour"/>
    </modport>
    <modport name=" slave_mp ">
        <field type="input output" name="taste"/>
    </modport>
    <modport name=" master_sync_mp">
    </modport>
    <modport name=" slave_sync_mp ">
        <field type="clocking" name="slave_cb"/>
    </modport>
</interface>
<interface nome="jelly_bean_if(">
    <comments comm=""/>
    <field type="output" name="taste"/>
    <modport name=" master_mp">
        <field type="input" name="sour"/>
    </modport>
    <modport name=" slave_mp ">
        <field type="input output" name="taste"/>
    </modport>
    <modport name=" master_sync_mp">
    </modport>
    <modport name=" slave_sync_mp ">
        <field type="clocking" name="slave_cb"/>
    </modport>
</interface>
<interface nome="jelly_bean_if(">
    <comments comm=""/>
    <field type="output" name="taste"/>
    <modport name=" master_mp">
        <field type="input" name="sour"/>
    </modport>
    <modport name=" slave_mp ">
        <field type="input output" name="taste"/>
    </modport>
    <modport name=" master_sync_mp">
    </modport>
    <modport name=" slave_sync_mp ">
        <field type="clocking" name="slave_cb"/>
    </modport>
</interface>
<interface nome="jelly_bean_if(">
    <comments comm=""/>
    <field type="output" name="taste"/>
    <modport name=" master_mp">
        <field type="input" name="sour"/>
    </modport>
    <modport name=" slave_mp ">
        <field type="input output" name="taste"/>
    </modport>
    <modport name=" master_sync_mp">
    </modport>
    <modport name=" slave_sync_mp ">
        <field type="clocking" name="slave_cb"/>
    </modport>
</interface>
<interface nome="jelly_bean_if(">
    <comments comm=""/>
    <field type="output" name="taste"/>
    <modport name=" master_mp">
        <field type="input" name="sour"/>
    </modport>
    <modport name=" slave_mp ">
        <field type="input output" name="taste"/>
    </modport>
    <modport name=" master_sync_mp">
    </modport>
    <modport name=" slave_sync_mp ">
        <field type="clocking" name="slave_cb"/>
    </modport>
</interface>
<interface nome="jelly_bean_if(">
    <comments comm=""/>
    <field type="output" name="taste"/>
    <modport name=" master_mp">
        <field type="input" name="sour"/>
    </modport>
    <modport name=" slave_mp ">
        <field type="input output" name="taste"/>
    </modport>
    <modport name=" master_sync_mp">
    </modport>
    <modport name=" slave_sync_mp ">
        <field type="clocking" name="slave_cb"/>
    </modport>
</interface>
<interface nome="jelly_bean_if(">
    <comments comm=""/>
    <field type="output" name="taste"/>
    <modport name=" master_mp">
        <field type="input" name="sour"/>
    </modport>
    <modport name=" slave_mp ">
        <field type="input output" name="taste"/>
    </modport>
    <modport name=" master_sync_mp">
    </modport>
    <modport name=" slave_sync_mp ">
        <field type="clocking" name="slave_cb"/>
    </modport>
</interface>
<interface nome="jelly_bean_if(">
    <comments comm=""/>
    <field type="output" name="taste"/>
    <modport name=" master_mp">
        <field type="input" name="sour"/>
    </modport>
    <modport name=" slave_mp ">
        <field type="input output" name="taste"/>
    </modport>
    <modport name=" master_sync_mp">
    </modport>
    <modport name=" slave_sync_mp ">
        <field type="clocking" name="slave_cb"/>
    </modport>
</interface>
<interface nome="jelly_bean_if(">
    <comments comm=""/>
    <field type="output" name="taste"/>
    <modport name=" master_mp">
        <field type="input" name="taster_id"/>
    </modport>
    <modport name=" slave_mp ">
        <field type="input output" name="taste"/>
    </modport>
    <modport name=" master_sync_mp">
    </modport>
    <modport name=" slave_sync_mp ">
        <field type="clocking" name="slave_cb"/>
    </modport>
</interface>
<interface nome="jelly_bean_if(input">
    <comments comm=""/>
    <field type="output" name="taste"/>
    <modport name=" master_mp">
        <field type="input" name="sour"/>
    </modport>
    <modport name=" slave_mp">
        <field type="input output" name="taste"/>
    </modport>
    <modport name=" master_sync_mp">
        <field type="clocking" name="master_cb"/>
    </modport>
    <modport name=" slave_sync_mp">
        <field type="clocking" name="slave_cb"/>
    </modport>
</interface>
<interface nome="jelly_bean_if(">
    <comments comm=""/>
    <field type="output" name="taste"/>
    <modport name=" master_mp">
        <field type="input" name="command"/>
    </modport>
    <modport name=" slave_mp ">
        <field type="input output" name="taste"/>
    </modport>
    <modport name=" master_sync_mp">
    </modport>
    <modport name=" slave_sync_mp ">
        <field type="clocking" name="slave_cb"/>
    </modport>
</interface>
<interface nome="jelly_bean_if(">
    <comments comm=""/>
    <field type="output" name="taste"/>
    <modport name=" master_mp">
        <field type="input" name="sour"/>
    </modport>
    <modport name=" slave_mp ">
        <field type="input output" name="taste"/>
    </modport>
    <modport name=" master_sync_mp">
    </modport>
    <modport name=" slave_sync_mp ">
        <field type="clocking" name="slave_cb"/>
    </modport>
</interface>
<interface nome="jelly_bean_if(">
    <comments comm=""/>
    <field type="output" name="taste"/>
    <modport name=" master_mp">
    </modport>
    <modport name=" slave_mp">
    </modport>
    <modport name=" master_sync_mp">
    </modport>
    <modport name=" slave_sync_mp">
    </modport>
</interface>
<module nome=" top;">
    <comments comm=""/>
    <field type="reg" name="clk"/>
</module>
<module nome=" jelly_bean_taster( jelly_bean_if.slave_mp jb_if );">
    <comments comm=""/>
</module>
<module nome=" top;">
    <comments comm=""/>
    <field type="reg" name="clk"/>
</module>
<module nome=" jelly_bean_taster( jelly_bean_if.slave_mp jb_if );">
    <comments comm=""/>
</module>
<module nome=" top;">
    <comments comm=""/>
    <field type="module" name="top"/>
</module>
<module nome=" top;">
    <comments comm=""/>
    <field type="reg" name="clk"/>
</module>
<module nome=" jelly_bean_taster( jelly_bean_if.slave_mp jb_if );">
    <comments comm=""/>
</module>
<module nome=" top;">
    <comments comm=""/>
    <field type="reg" name="clk"/>
</module>
<module nome=" jelly_bean_taster( jelly_bean_if.slave_mp jb_if );">
    <comments comm=""/>
</module>
<module nome=" top;">
    <comments comm=""/>
    <field type="module" name="top"/>
</module>
<module nome=" top;">
    <comments comm=""/>
    <field type="reg" name="clk"/>
</module>
<module nome=" jelly_bean_taster( jelly_bean_if.slave_mp jb_if );">
    <comments comm=""/>
</module>
<module nome=" jelly_bean_taster( jelly_bean_if.slave_mp jb_if );">
    <comments comm=""/>
</module>
<module nome=" jelly_bean_subsystem( jelly_bean_if.slave_mp jb_if1,">
    <comments comm=""/>
</module>
<module nome=" top;">
    <comments comm=""/>
    <field type="reg" name="clk"/>
</module>
<module nome=" jelly_bean_taster( jelly_bean_if.slave_mp jb_slave_if );">
    <comments comm=""/>
</module>
<module nome=" top;">
    <comments comm=""/>
    <field type="reg" name="clk"/>
</module>
<module nome=" top;">
    <comments comm=""/>
    <field type="reg" name="clk"/>
</module>
<module nome=" jelly_bean_taster( jelly_bean_if.slave_mp jb_if );">
    <comments comm=""/>
</module>
<module nome=" top;">
    <comments comm=""/>
    <field type="reg" name="clk"/>
</module>
<module nome=" jelly_bean_partnership( jelly_bean_if.slave_mp jb_if );">
    <comments comm=""/>
</module>
<module nome=" jelly_bean_taster( jelly_bean_if.slave_mp jb_if );">
    <comments comm=""/>
    <field type="reg [1:0]" name="command"/>
</module>
<module nome=" jelly_bean_partner( jelly_bean_if.slave_mp jb_if );">
    <comments comm=""/>
    <field type="reg [1:0]" name="command"/>
</module>
<module nome=" jelly_bean_extra;">
    <comments comm=""/>
    <field type="reg" name="sour"/>
</module>
<module nome=" jelly_bean_taster(jelly_bean_if.slave_mp jb_slave_if );">
    <comments comm=""/>
</module>
<module nome=" top;">
    <comments comm=""/>
    <field type="reg" name="clk"/>
</module>
<module nome=" top;">
    <comments comm=""/>
    <field type="reg" name="clk"/>
</module>
<module nome=" jelly_bean_taster( jelly_bean_if.slave_mp jb_if );">
    <comments comm=""/>
    <field type="reg [1:0]" name="command"/>
</module>
<module nome=" top;">
    <comments comm=""/>
    <field type="reg" name="clk"/>
</module>
<module nome=" jelly_bean_taster( jelly_bean_if.slave_mp jb_if );">
    <comments comm=""/>
</module>
<module nome=" jelly_bean_taster( jelly_bean_if.slave_mp jb_slave_if );">
    <comments comm=""/>
    <field type="assign" name="jb_slave_if.taste"/>
</module>
<module nome=" top;">
    <comments comm=""/>
    <field type="reg" name="clk"/>
</module>
<pkg name=" jelly_bean_pkg;">
    <comments comm=""/>
    <field type="typedef enum bit [1:0] {" name="taste_e"/>
<file fl="transactions.svh
sequences.svh
agent.svh
env.svh
test.svh
"/></pkg><pkg name=" jelly_bean_pkg;">
    <comments comm=""/>
    <field type="typedef enum bit [1:0] {" name="taste_e"/>
<file fl="transactions.svh
sequences.svh
agent.svh
env.svh
test.svh
"/></pkg><pkg name=" jelly_bean_pkg;">
    <comments comm=""/>
    <field type="typedef enum bit [1:0] {" name="taste_e"/>
<file fl="transactions.svh
sequences.svh
agent.svh
env.svh
test.svh
"/></pkg><pkg name=" jelly_bean_pkg;">
    <comments comm=""/>
    <field type="typedef enum bit [1:0] {" name="taste_e"/>
<file fl="transactions.svh
sequences.svh
agent.svh
env.svh
test.svh
"/></pkg><pkg name=" jelly_bean_pkg;">
    <comments comm=""/>
    <field type="jelly_bean_env" name="jb_env"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="bit" name="try_put">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="bit" name="can_put">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="bit" name="try_get">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="bit" name="can_get">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="bit" name="try_peek">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="bit" name="can_peek">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="bit" name="nb_transport">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_configuration" name="jb_cfg"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_req"/>
    </task>
    <task name="run_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_req"/>
    </task>
    <task name="run_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_rsp"/>
    </task>
    <task name="run_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_rsp"/>
    </task>
    <task name="put">
        <param>
        </param>
        <comments comm=""/>
    </task>
    <task name="get">
        <param>
        </param>
        <comments comm=""/>
    </task>
    <task name="peek">
        <param>
        </param>
        <comments comm=""/>
    </task>
    <task name="transport">
        <param>
        </param>
        <comments comm=""/>
    </task>
    <task name="run_phase">
        <param>
        </param>
        <comments comm="//    `uvm_info( "jelly_bean_test", { "\n", jb_seq.sprint() }, UVM_LOW )"/>
        <field type="one_jelly_bean_sequence" name="jb_seq"/>
    </task>
<file fl=""/></pkg><pkg name=" jelly_bean_pkg;">
    <comments comm=""/>
    <field type="typedef enum bit [1:0] {" name="taste_e"/>
<file fl="transactions.svh
sequences.svh
agent.svh
env.svh
test.svh
"/></pkg><pkg name=" jelly_bean_pkg;">
    <comments comm=""/>
    <field type="jelly_bean_agent_config" name="jb_agent_cfg2"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_scoreboard" name="jb_sb"/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="report_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="check_jelly_bean_taste">
        <param>
        </param>
        <comments comm=""/>
        <field type="uvm_table_printer" name="p"/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
    <task name="body">
        <param>
        </param>
        <comments comm="// case ( recipe )"/>
    </task>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_recipe_virtual_sequence" name="jb_vseq"/>
    </task>
<file fl=""/></pkg><pkg name=" jelly_bean_pkg;">
    <comments comm=""/>
    <field type="jelly_bean_env" name="jb_env"/>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_scoreboard" name="jb_sb"/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="check_jelly_bean_taste">
        <param>
        </param>
        <comments comm=""/>
        <field type="uvm_table_printer" name="p"/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_configuration" name="jb_cfg"/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="same_flavored_jelly_beans_sequence" name="jb_seq"/>
    </task>
    <task name="run_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
    <task name="run_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
    <task name="run_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="gift_boxed_jelly_beans_sequence" name="jb_seq"/>
    </task>
<file fl=""/></pkg><pkg name=" jelly_bean_pkg;">
    <comments comm=""/>
    <field type="typedef enum bit [1:0] {" name="taste_e"/>
<file fl="transactions.svh
sequences.svh
agent.svh
env.svh
test.svh
"/></pkg><pkg name=" jelly_bean_pkg;">
    <comments comm=""/>
    <field type="typedef bit" name="taster_id_t"/>
<file fl="transactions.svh
ral.svh
sequences.svh
agent.svh
env.svh
tests.svh
"/></pkg><pkg name=" jelly_bean_pkg;">
    <comments comm=""/>
    <field type="jelly_bean_env" name="jb_env"/>
    <function return="void" name="do_copy">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="bit" name="do_compare">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="that"/>
    </function>
    <function return="void" name="do_pack">
        <param>
        </param>
        <comments comm="// reserved bit// reserved bits"/>
        <field type="bit [5:0]" name="R6"/>
    </function>
    <function return="void" name="do_unpack">
        <param>
        </param>
        <comments comm="// reserved bit// reserved bits"/>
        <field type="bit [5:0]" name="R6"/>
    </function>
    <function return="string" name="convert2string">
        <param>
        </param>
        <comments comm=""/>
        <field type="string" name="s"/>
    </function>
    <function return="void" name="build_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="write">
        <param>
            <field type="jelly_bean_transaction" name="t"/>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="write">
        <param>
            <field type="jelly_bean_transaction" name="t"/>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_scoreboard" name="jb_sb"/>
    </function>
    <function return="void" name="build_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="check_jelly_bean_taste">
        <param>
            <field type="jelly_bean_transaction" name="jb_tx"/>
        </param>
        <comments comm=""/>
        <field type="uvm_table_printer" name="p"/>
    </function>
    <function return="void" name="build_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_configuration" name="jb_cfg"/>
    </function>
    <task name="run_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
    <task name="run_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
    <task name="run_phase">
        <param>
        </param>
        <comments comm="// copy jb_tx1 to jb_tx2// create jb_tx3 by packing and unpacking jb_tx1// check if jb_tx1, jb_tx2 and jb_tx3 have the same properties// print each object"/>
        <field type="int" name="num_bits"/>
    </task>
<file fl=""/></pkg><pkg name=" jelly_bean_pkg;">
    <comments comm=""/>
    <field type="typedef enum bit [1:0] {" name="command_e"/>
<file fl="transactions.svh
ral.svh
sequences.svh
agent.svh
env.svh
tests.svh
"/></pkg><pkg name=" jelly_bean_pkg;">
    <comments comm=""/>
    <field type="typedef enum bit [1:0] {" name="taste_e"/>
<file fl="transactions.svh
sequences.svh
agent.svh
env.svh
test.svh
"/></pkg><pkg name=" jelly_bean_pkg;">
    <comments comm=""/>
    <field type="jelly_bean_reg_block" name="jb_reg_block"/>
    <function return="void" name="build">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build">
        <param>
        </param>
        <comments comm="// finalize the address mapping"/>
    </function>
    <function return="uvm_sequence_item" name="reg2bus">
        <param>
        </param>
        <comments comm=""/>
        <field type="else" name="jb_tx.command"/>
    </function>
    <function return="void" name="bus2reg">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="write">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_scoreboard" name="jb_sb"/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="check_jelly_bean_taste">
        <param>
        </param>
        <comments comm=""/>
        <field type="uvm_table_printer" name="p"/>
    </function>
    <function return="void" name="build_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="connect_phase">
        <param>
        </param>
        <comments comm="// if the top-level env"/>
    </function>
    <function return="void" name="build_phase">
        <param>
            <field type="uvm_phase" name="phase"/>
        </param>
        <comments comm=""/>
    </function>
    <function return="void" name="start_of_simulation_phase">
        <param>
        </param>
        <comments comm=""/>
    </function>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
    <task name="body">
        <param>
        </param>
        <comments comm=""/>
        <field type="uvm_reg_data_t" name="value"/>
    </task>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_transaction" name="jb_tx"/>
    </task>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="jelly_bean_reg_sequence" name="jb_reg_seq"/>
    </task>
    <task name="main_phase">
        <param>
        </param>
        <comments comm=""/>
        <field type="uvm_reg_hw_reset_seq" name="reg_hw_reset_seq"/>
    </task>
<file fl=""/></pkg>